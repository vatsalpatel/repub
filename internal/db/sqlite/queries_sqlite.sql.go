// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries_sqlite.sql

package sqlite

import (
	"context"
	"database/sql"
)

const addPackageUploader = `-- name: AddPackageUploader :exec
INSERT INTO package_uploaders (package_id, uploader)
VALUES (?, ?)
ON CONFLICT (package_id, uploader) DO NOTHING
`

type AddPackageUploaderParams struct {
	PackageID sql.NullInt64 `json:"package_id"`
	Uploader  string        `json:"uploader"`
}

func (q *Queries) AddPackageUploader(ctx context.Context, arg AddPackageUploaderParams) error {
	_, err := q.db.ExecContext(ctx, addPackageUploader, arg.PackageID, arg.Uploader)
	return err
}

const createPackage = `-- name: CreatePackage :one
INSERT INTO packages (name, private, description, homepage, repository, documentation, topics)
VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id, name, private, description, homepage, repository, documentation, topics, download_count, like_count, created_at, updated_at
`

type CreatePackageParams struct {
	Name          string         `json:"name"`
	Private       bool           `json:"private"`
	Description   sql.NullString `json:"description"`
	Homepage      sql.NullString `json:"homepage"`
	Repository    sql.NullString `json:"repository"`
	Documentation sql.NullString `json:"documentation"`
	Topics        sql.NullString `json:"topics"`
}

func (q *Queries) CreatePackage(ctx context.Context, arg CreatePackageParams) (Package, error) {
	row := q.db.QueryRowContext(ctx, createPackage,
		arg.Name,
		arg.Private,
		arg.Description,
		arg.Homepage,
		arg.Repository,
		arg.Documentation,
		arg.Topics,
	)
	var i Package
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Private,
		&i.Description,
		&i.Homepage,
		&i.Repository,
		&i.Documentation,
		&i.Topics,
		&i.DownloadCount,
		&i.LikeCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createPackageVersion = `-- name: CreatePackageVersion :one
INSERT INTO package_versions (
    package_id, version, description, pubspec_yaml, readme, changelog,
    archive_path, archive_sha256, uploader
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id, package_id, version, description, pubspec_yaml, readme, changelog, archive_path, archive_sha256, uploader, retracted, download_count, created_at
`

type CreatePackageVersionParams struct {
	PackageID     int64          `json:"package_id"`
	Version       string         `json:"version"`
	Description   sql.NullString `json:"description"`
	PubspecYaml   string         `json:"pubspec_yaml"`
	Readme        sql.NullString `json:"readme"`
	Changelog     sql.NullString `json:"changelog"`
	ArchivePath   string         `json:"archive_path"`
	ArchiveSha256 sql.NullString `json:"archive_sha256"`
	Uploader      sql.NullString `json:"uploader"`
}

func (q *Queries) CreatePackageVersion(ctx context.Context, arg CreatePackageVersionParams) (PackageVersion, error) {
	row := q.db.QueryRowContext(ctx, createPackageVersion,
		arg.PackageID,
		arg.Version,
		arg.Description,
		arg.PubspecYaml,
		arg.Readme,
		arg.Changelog,
		arg.ArchivePath,
		arg.ArchiveSha256,
		arg.Uploader,
	)
	var i PackageVersion
	err := row.Scan(
		&i.ID,
		&i.PackageID,
		&i.Version,
		&i.Description,
		&i.PubspecYaml,
		&i.Readme,
		&i.Changelog,
		&i.ArchivePath,
		&i.ArchiveSha256,
		&i.Uploader,
		&i.Retracted,
		&i.DownloadCount,
		&i.CreatedAt,
	)
	return i, err
}

const getLatestPackageVersion = `-- name: GetLatestPackageVersion :one
SELECT id, package_id, version, description, pubspec_yaml, readme, changelog, archive_path, archive_sha256, uploader, retracted, download_count, created_at FROM package_versions 
WHERE package_id = ? AND retracted = false
ORDER BY created_at DESC 
LIMIT 1
`

func (q *Queries) GetLatestPackageVersion(ctx context.Context, packageID int64) (PackageVersion, error) {
	row := q.db.QueryRowContext(ctx, getLatestPackageVersion, packageID)
	var i PackageVersion
	err := row.Scan(
		&i.ID,
		&i.PackageID,
		&i.Version,
		&i.Description,
		&i.PubspecYaml,
		&i.Readme,
		&i.Changelog,
		&i.ArchivePath,
		&i.ArchiveSha256,
		&i.Uploader,
		&i.Retracted,
		&i.DownloadCount,
		&i.CreatedAt,
	)
	return i, err
}

const getPackage = `-- name: GetPackage :one
SELECT id, name, private, description, homepage, repository, documentation, topics, download_count, like_count, created_at, updated_at FROM packages WHERE name = ?
`

func (q *Queries) GetPackage(ctx context.Context, name string) (Package, error) {
	row := q.db.QueryRowContext(ctx, getPackage, name)
	var i Package
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Private,
		&i.Description,
		&i.Homepage,
		&i.Repository,
		&i.Documentation,
		&i.Topics,
		&i.DownloadCount,
		&i.LikeCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPackageUploaders = `-- name: GetPackageUploaders :many
SELECT uploader FROM package_uploaders WHERE package_id = ?
`

func (q *Queries) GetPackageUploaders(ctx context.Context, packageID sql.NullInt64) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getPackageUploaders, packageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var uploader string
		if err := rows.Scan(&uploader); err != nil {
			return nil, err
		}
		items = append(items, uploader)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPackageVersions = `-- name: GetPackageVersions :many
SELECT id, package_id, version, description, pubspec_yaml, readme, changelog, archive_path, archive_sha256, uploader, retracted, download_count, created_at FROM package_versions 
WHERE package_id = ? 
ORDER BY created_at DESC
`

func (q *Queries) GetPackageVersions(ctx context.Context, packageID int64) ([]PackageVersion, error) {
	rows, err := q.db.QueryContext(ctx, getPackageVersions, packageID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PackageVersion
	for rows.Next() {
		var i PackageVersion
		if err := rows.Scan(
			&i.ID,
			&i.PackageID,
			&i.Version,
			&i.Description,
			&i.PubspecYaml,
			&i.Readme,
			&i.Changelog,
			&i.ArchivePath,
			&i.ArchiveSha256,
			&i.Uploader,
			&i.Retracted,
			&i.DownloadCount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementDownloadCount = `-- name: IncrementDownloadCount :exec
UPDATE package_versions SET download_count = download_count + 1 
WHERE package_id = ? AND version = ?
`

type IncrementDownloadCountParams struct {
	PackageID int64  `json:"package_id"`
	Version   string `json:"version"`
}

func (q *Queries) IncrementDownloadCount(ctx context.Context, arg IncrementDownloadCountParams) error {
	_, err := q.db.ExecContext(ctx, incrementDownloadCount, arg.PackageID, arg.Version)
	return err
}

const incrementPackageDownloadCount = `-- name: IncrementPackageDownloadCount :exec
UPDATE packages SET download_count = download_count + 1 WHERE id = ?
`

func (q *Queries) IncrementPackageDownloadCount(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, incrementPackageDownloadCount, id)
	return err
}

const listPackages = `-- name: ListPackages :many
SELECT id, name, private, description, homepage, repository, documentation, topics, download_count, like_count, created_at, updated_at FROM packages 
ORDER BY name
LIMIT ? OFFSET ?
`

type ListPackagesParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

func (q *Queries) ListPackages(ctx context.Context, arg ListPackagesParams) ([]Package, error) {
	rows, err := q.db.QueryContext(ctx, listPackages, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Package
	for rows.Next() {
		var i Package
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Private,
			&i.Description,
			&i.Homepage,
			&i.Repository,
			&i.Documentation,
			&i.Topics,
			&i.DownloadCount,
			&i.LikeCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePackageMetadata = `-- name: UpdatePackageMetadata :exec
UPDATE packages 
SET description = ?, homepage = ?, repository = ?, documentation = ?, topics = ?, updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdatePackageMetadataParams struct {
	Description   sql.NullString `json:"description"`
	Homepage      sql.NullString `json:"homepage"`
	Repository    sql.NullString `json:"repository"`
	Documentation sql.NullString `json:"documentation"`
	Topics        sql.NullString `json:"topics"`
	ID            int64          `json:"id"`
}

func (q *Queries) UpdatePackageMetadata(ctx context.Context, arg UpdatePackageMetadataParams) error {
	_, err := q.db.ExecContext(ctx, updatePackageMetadata,
		arg.Description,
		arg.Homepage,
		arg.Repository,
		arg.Documentation,
		arg.Topics,
		arg.ID,
	)
	return err
}
